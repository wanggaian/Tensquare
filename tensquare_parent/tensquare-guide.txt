1.功能服务->镜像->镜像做成容器->同类的容器集合/微服务
2.前端 安卓,iOS,H5,jsp
3,powerdesigner -> 数据库架构设计
4.UML 统一建模语言
5.公共镜像如MySQL服务,VM下载->CentOS加载->启动虚拟机->我的电脑管理器service/VMware DHCP->login:root->password:itcast->ip addr->IP->192.168.214.128/24
6.xshell下载
7.docker images
8.systemctl start docker 启动docker
9.docker search mysql
10.docker pull mysql/mysql server
11.网络编辑 ifcfg-ens33
12.创建镜像 docker run -di --name=tensquare_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root centos/mysql-57-centos7
13.查看docker(-a 未启动)docker ps
14.sqlyog 验证mysql容器OK
15.sqlyog->询问 + 建表脚本语句->刷新浏览对象->建表结束
16.idea配置jdk/maven/runner(-DarchetypeCatalog=internal)

common模块
17.父工程Result/PageResult/StatuCode对象创建
18.分布式id生成器 -> twitter 雪花算法

base模块
19.resources添加application.yml文件, 可以自动提示,
server:
  port: 9001
spring:
  application:
    name: tensquare-base
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.214.128:3306/tensquare_base?characterEncoding=utf-8
    username: root   (注:不是data-username)
    password: root
  jpa:
    database: mysql
    show-sql: true
20.spring-boot-starter-data-jpa/mysql-connector-java pom文件 alt+insert->依赖
21.controller层 @CrossOrigin微服务  @PathVariable(value = "RequestMapping路径中的")
22.dao层不需要注释 只用继承JpaRepository<Label, String>, JpaSpecificationExcutor<Label>
23.postman调用
24.平时需要关闭虚拟机, 重启虚拟机后, xshell连接, systemctl start docker , 如何开启之前的mysql服务? docker start tensquare_mysql(或者容器id)
25.java端口占用 netstat -ano|findstr "9050"  -> 然后查看进程 tasklist|findstr "2016"  ->  taskkill /F /PID  17956
26.@RequestBody 将json字符串转成对象或者map
27.分页对象用Page<Label> new PageResult<Label>(pageData.getTotalElements(), pageData.getContent()) 返回给前端, 先写service类方法 alt + enter 自动生成service方法, Pageable pageable = PageRequest.of(page - 1, size); 分页参数
28.return labelDao.findAll(new Specification<Label>() {

            /**
             *
             * @param root 将条件封装到哪一个根对象 where 类名 = label.getId()
             * @param query 查询语句 一般不用 比如 groupBy orderBy
             * @param cb 条件封装对象 返回null则不需要
             * @return
             */
            @Override
            public Predicate toPredicate(Root<Label> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                // 先new一个list存放
                List<Predicate> list = new ArrayList<>();
                if (!StringUtils.isEmpty(label.getLabelname())) {
                    Predicate predicate = cb.like(root.get("labelname").as(String.class), "%" + label.getLabelname() + "%"); // where labelname = "%小明%"
                    list.add(predicate);
                }
                if (!StringUtils.isEmpty(label.getState())) {
                    Predicate predicate = cb.equal(root.get("state").as(String.class), label.getState()); // where state = 1
                    list.add(predicate);
                }
                Predicate[] arr = new Predicate[list.size()];
                list.toArray(arr); // 将list对象转换成数组存放到arr
                return cb.and(arr); // where labelname = %小明% and state = 1
            }
        }, pageable);
29.代码生成器https://gitee.com/chuanzhiliubei/codeutil   (注:代码生成器db的路径不要包含有中文)
30.使用原生sql语句,优势可以在sqlyog中执行校验 如 SELECT * FROM tb_problem,tb_pl WHERE id = problemid AND labelid = "1"
	SELECT * FROM tb_problem,tb_pl WHERE id IN (SELECT problemid FROM tb_pl WHERE labelid = "1")   (尽量不用in,效率低)
31.

